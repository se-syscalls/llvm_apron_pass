-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Apron: Function: f
Apron: Library box, version 1.0 with NUM_MPQ
digraph "f" {
}
entry: Abstract value:
interval of dim (3,0):
     sub in [-oo,+oo]
     x.0 in [1,+oo]
       y in [-oo,+oo]
Linear Condition:
array of constraints of size 1
 0: x.0 - 1 >= 0
Tree Condition:
array of constraints of size 1
 0: -1 + 1 * x.0 >= 0

{'mpt':{},abstract1:{interval of dim (0,0):top
}
interval of dim (3,0):
     sub in [-oo,+oo]
     x.0 in [1,+oo]
       y in [-oo,+oo]

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Apron: Function: f2
Apron: Library box, version 1.0 with NUM_MPQ
digraph "f2" {
}
entry: Abstract value:
interval of dim (4,0):
     sub in [-oo,+oo]
    sub1 in [-oo,+oo]
       y in [-oo,+oo]
       z in [-oo,+oo]
Linear Condition:
empty array of constraints
Tree Condition:
empty array of constraints

{'mpt':{},abstract1:{interval of dim (0,0):top
}
interval of dim (4,0):
     sub in [-oo,+oo]
    sub1 in [-oo,+oo]
       y in [-oo,+oo]
       z in [-oo,+oo]

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Apron: Function: f3
Apron: Library box, version 1.0 with NUM_MPQ
digraph "f3" {
	"entry" -> "return"
	"entry" -> "for.cond.preheader"
	"for.cond.preheader" -> "for.body.lr.ph"
	"for.cond.preheader" -> "return"
	"for.body.lr.ph" -> "return"
}
entry: Abstract value:
interval of dim (1,0): bottom
Linear Condition:
array of constraints of size 1
 0: -1 >= 0
Tree Condition:
array of constraints of size 1
 0: -1 >= 0

for.cond.preheader: Abstract value:
interval of dim (1,0):
       y in [-oo,100]
Linear Condition:
array of constraints of size 1
 0: -y + 100 >= 0
Tree Condition:
array of constraints of size 1
 0: 100 + -1 * y >= 0

return: Abstract value:
interval of dim (12,0):
retval.0 in [-oo,+oo]
     tmp in [0,200]
    tmp1 in [0,98]
    tmp2 in [0,98]
    tmp3 in [-1,97]
    tmp4 in [-1,97]
    tmp5 in [-oo,+oo]
    tmp6 in [-oo,+oo]
    tmp7 in [-oo,+oo]
    tmp8 in [-oo,+oo]
    tmp9 in [-oo,+oo]
       y in [-oo,+oo]
Linear Condition:
array of constraints of size 10
 0: tmp >= 0
 1: -tmp + 200 >= 0
 2: tmp1 >= 0
 3: -tmp1 + 98 >= 0
 4: tmp2 >= 0
 5: -tmp2 + 98 >= 0
 6: tmp3 + 1 >= 0
 7: -tmp3 + 97 >= 0
 8: tmp4 + 1 >= 0
 9: -tmp4 + 97 >= 0
Tree Condition:
array of constraints of size 10
 0: 0 + 1 * tmp >= 0
 1: 200 + -1 * tmp >= 0
 2: 0 + 1 * tmp1 >= 0
 3: 98 + -1 * tmp1 >= 0
 4: 0 + 1 * tmp2 >= 0
 5: 98 + -1 * tmp2 >= 0
 6: 1 + 1 * tmp3 >= 0
 7: 97 + -1 * tmp3 >= 0
 8: 1 + 1 * tmp4 >= 0
 9: 97 + -1 * tmp4 >= 0

for.body.lr.ph: Abstract value:
interval of dim (11,0):
     tmp in [4,200]
    tmp1 in [0,98]
    tmp2 in [0,98]
    tmp3 in [-1,97]
    tmp4 in [-1,97]
    tmp5 in [-oo,+oo]
    tmp6 in [-oo,+oo]
    tmp7 in [-oo,+oo]
    tmp8 in [-oo,+oo]
    tmp9 in [-oo,+oo]
       y in [2,100]
Linear Condition:
array of constraints of size 12
 0: tmp - 4 >= 0
 1: -tmp + 200 >= 0
 2: tmp1 >= 0
 3: -tmp1 + 98 >= 0
 4: tmp2 >= 0
 5: -tmp2 + 98 >= 0
 6: tmp3 + 1 >= 0
 7: -tmp3 + 97 >= 0
 8: tmp4 + 1 >= 0
 9: -tmp4 + 97 >= 0
10: y - 2 >= 0
11: -y + 100 >= 0
Tree Condition:
array of constraints of size 12
 0: -4 + 1 * tmp >= 0
 1: 200 + -1 * tmp >= 0
 2: 0 + 1 * tmp1 >= 0
 3: 98 + -1 * tmp1 >= 0
 4: 0 + 1 * tmp2 >= 0
 5: 98 + -1 * tmp2 >= 0
 6: 1 + 1 * tmp3 >= 0
 7: 97 + -1 * tmp3 >= 0
 8: 1 + 1 * tmp4 >= 0
 9: 97 + -1 * tmp4 >= 0
10: -2 + 1 * y >= 0
11: 100 + -1 * y >= 0

{'mpt':{},abstract1:{interval of dim (0,0):top
}
interval of dim (12,0):
retval.0 in [-oo,+oo]
     tmp in [0,200]
    tmp1 in [0,98]
    tmp2 in [0,98]
    tmp3 in [-1,97]
    tmp4 in [-1,97]
    tmp5 in [-oo,+oo]
    tmp6 in [-oo,+oo]
    tmp7 in [-oo,+oo]
    tmp8 in [-oo,+oo]
    tmp9 in [-oo,+oo]
       y in [-oo,+oo]

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Apron: Function: f4
Apron: Library box, version 1.0 with NUM_MPQ
digraph "f4" {
	"if.then" -> "if.end"
	"if.else" -> "if.end"
	"entry" -> "if.then"
	"entry" -> "if.else"
}
if.then: Abstract value:
interval of dim (2,0):
     add in [8,+oo]
       y in [-oo,-1]
Linear Condition:
array of constraints of size 2
 0: add - 8 >= 0
 1: -y - 1 >= 0
Tree Condition:
array of constraints of size 2
 0: -8 + 1 * add >= 0
 1: -1 + -1 * y >= 0

if.else: Abstract value:
interval of dim (3,0):
    sub1 in [-3,+oo]
    sub2 in [-oo,0]
       y in [0,+oo]
Linear Condition:
array of constraints of size 3
 0: sub1 + 3 >= 0
 1: -sub2 >= 0
 2: y >= 0
Tree Condition:
array of constraints of size 3
 0: 3 + 1 * sub1 >= 0
 1: 0 + -1 * sub2 >= 0
 2: 0 + 1 * y >= 0

entry: Abstract value:
interval of dim (1,0): bottom
Linear Condition:
array of constraints of size 1
 0: -1 >= 0
Tree Condition:
array of constraints of size 1
 0: -1 >= 0

if.end: Abstract value:
interval of dim (7,0):
     add in [-oo,+oo]
    add3 in [-oo,+oo]
    sub1 in [-3,+oo]
    sub2 in [-oo,0]
     x.0 in [-oo,0]
       y in [-oo,+oo]
     z.0 in [-3,+oo]
Linear Condition:
array of constraints of size 4
 0: sub1 + 3 >= 0
 1: -sub2 >= 0
 2: -x.0 >= 0
 3: z.0 + 3 >= 0
Tree Condition:
array of constraints of size 4
 0: 3 + 1 * sub1 >= 0
 1: 0 + -1 * sub2 >= 0
 2: 0 + -1 * x.0 >= 0
 3: 3 + 1 * z.0 >= 0

{'mpt':{},abstract1:{interval of dim (0,0):top
}
interval of dim (7,0):
     add in [-oo,+oo]
    add3 in [-oo,+oo]
    sub1 in [-3,+oo]
    sub2 in [-oo,0]
     x.0 in [-oo,0]
       y in [-oo,+oo]
     z.0 in [-3,+oo]

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Apron: Function: f5
Apron: Library box, version 1.0 with NUM_MPQ
digraph "f5" {
	"entry" -> "return"
	"entry" -> "if.else"
	"return" -> "UnifiedReturnBlock"
	"if.else" -> "UnifiedReturnBlock"
}
entry: Abstract value:
interval of dim (1,0): bottom
Linear Condition:
array of constraints of size 1
 0: -1 >= 0
Tree Condition:
array of constraints of size 1
 0: -1 >= 0

return: Abstract value:
interval of dim (1,0):
       y in [0,+oo]
Linear Condition:
array of constraints of size 1
 0: y >= 0
Tree Condition:
array of constraints of size 1
 0: 0 + 1 * y >= 0

if.else: Abstract value:
interval of dim (3,0):
    .sub in [1,+oo]
     sub in [1,+oo]
       y in [-oo,-1]
Linear Condition:
array of constraints of size 3
 0: .sub - 1 >= 0
 1: sub - 1 >= 0
 2: -y - 1 >= 0
Tree Condition:
array of constraints of size 3
 0: -1 + 1 * .sub >= 0
 1: -1 + 1 * sub >= 0
 2: -1 + -1 * y >= 0

UnifiedReturnBlock: Abstract value:
interval of dim (4,0):
    .sub in [0,+oo]
UnifiedRetVal in [0,+oo]
     sub in [0,+oo]
       y in [-oo,+oo]
Linear Condition:
array of constraints of size 3
 0: .sub >= 0
 1: UnifiedRetVal >= 0
 2: sub >= 0
Tree Condition:
array of constraints of size 3
 0: 0 + 1 * .sub >= 0
 1: 0 + 1 * UnifiedRetVal >= 0
 2: 0 + 1 * sub >= 0

{'mpt':{},abstract1:{interval of dim (0,0):top
}
interval of dim (4,0):
    .sub in [0,+oo]
UnifiedRetVal in [0,+oo]
     sub in [0,+oo]
       y in [-oo,+oo]

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Apron: Function: f6
Apron: Library box, version 1.0 with NUM_MPQ
digraph "f6" {
	"entry" -> "if.end3"
	"entry" -> "if.else"
	"if.else" -> "UnifiedReturnBlock"
	"if.end3" -> "UnifiedReturnBlock"
}
entry: Abstract value:
interval of dim (1,0): bottom
Linear Condition:
array of constraints of size 1
 0: -1 >= 0
Tree Condition:
array of constraints of size 1
 0: -1 >= 0

if.else: Abstract value:
interval of dim (3,0):
       . in [-oo,+oo]
    cmp1 in [-oo,+oo]
       y in [0,+oo]
Linear Condition:
array of constraints of size 1
 0: y >= 0
Tree Condition:
array of constraints of size 1
 0: 0 + 1 * y >= 0

UnifiedReturnBlock: Abstract value:
interval of dim (4,0): bottom
Linear Condition:
array of constraints of size 1
 0: -1 >= 0
Tree Condition:
array of constraints of size 1
 0: -1 >= 0

if.end3: Abstract value:
interval of dim (1,0):
       y in [-oo,-1]
Linear Condition:
array of constraints of size 1
 0: -y - 1 >= 0
Tree Condition:
array of constraints of size 1
 0: -1 + -1 * y >= 0

{'mpt':{},abstract1:{interval of dim (0,0):top
}
interval of dim (4,0): bottom

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Apron: Function: f7
Apron: Library box, version 1.0 with NUM_MPQ
digraph "f7" {
	"if.then" -> "if.end"
	"entry" -> "if.then"
	"entry" -> "if.end"
}
if.then: Abstract value:
interval of dim (1,0):
       y in [31,+oo]
Linear Condition:
array of constraints of size 1
 0: y - 31 >= 0
Tree Condition:
array of constraints of size 1
 0: -31 + 1 * y >= 0

if.end: Abstract value:
interval of dim (2,0):
       y in [-oo,+oo]
y.addr.0 in [-oo,30]
Linear Condition:
array of constraints of size 1
 0: -y.addr.0 + 30 >= 0
Tree Condition:
array of constraints of size 1
 0: 30 + -1 * y.addr.0 >= 0

entry: Abstract value:
interval of dim (1,0): bottom
Linear Condition:
array of constraints of size 1
 0: -1 >= 0
Tree Condition:
array of constraints of size 1
 0: -1 >= 0

{'mpt':{},abstract1:{interval of dim (0,0):top
}
interval of dim (2,0):
       y in [-oo,+oo]
y.addr.0 in [-oo,30]

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Apron: Function: f8
Apron: Library box, version 1.0 with NUM_MPQ
digraph "f8" {
}
entry: Abstract value:
interval of dim (3,0): bottom
Linear Condition:
array of constraints of size 1
 0: -1 >= 0
Tree Condition:
array of constraints of size 1
 0: -1 >= 0

{'mpt':{},abstract1:{interval of dim (0,0):top
}
interval of dim (3,0): bottom

