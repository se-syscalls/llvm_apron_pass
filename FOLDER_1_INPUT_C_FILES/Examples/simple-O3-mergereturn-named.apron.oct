-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Apron: Function: f
Apron: Library oct, version 1.0 with NUM_MPQ
digraph "f" {
}
entry: Abstract value:
octagon of dim (3,0)
-sub + x.0 >= 0
x.0 - 1 >= 0
sub + y >= 0
x.0 + y >= 0
-sub - y >= 0
Linear Condition:
array of constraints of size 5
 0: -sub + x.0 >= 0
 1: x.0 - 1 >= 0
 2: sub + y >= 0
 3: x.0 + y >= 0
 4: -sub - y >= 0
Tree Condition:
array of constraints of size 5
 0: 0 + -1 * sub + 1 * x.0 >= 0
 1: -1 + 1 * x.0 >= 0
 2: 0 + 1 * sub + 1 * y >= 0
 3: 0 + 1 * x.0 + 1 * y >= 0
 4: 0 + -1 * sub + -1 * y >= 0

{'mpt':{},abstract1:{empty octagon of dim (0,0)
}
octagon of dim (3,0)
-sub + x.0 >= 0
x.0 - 1 >= 0
sub + y >= 0
x.0 + y >= 0
-sub - y >= 0

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Apron: Function: f2
Apron: Library oct, version 1.0 with NUM_MPQ
digraph "f2" {
}
entry: Abstract value:
octagon of dim (4,0)
sub + y - 1 >= 0
-sub - y + 1 >= 0
Linear Condition:
array of constraints of size 2
 0: sub + y - 1 >= 0
 1: -sub - y + 1 >= 0
Tree Condition:
array of constraints of size 2
 0: -1 + 1 * sub + 1 * y >= 0
 1: 1 + -1 * sub + -1 * y >= 0

{'mpt':{},abstract1:{empty octagon of dim (0,0)
}
octagon of dim (4,0)
sub + y - 1 >= 0
-sub - y + 1 >= 0

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Apron: Function: f3
Apron: Library oct, version 1.0 with NUM_MPQ
digraph "f3" {
	"for.cond.preheader" -> "for.body.lr.ph"
	"for.cond.preheader" -> "return"
	"for.body.lr.ph" -> "return"
	"entry" -> "return"
	"entry" -> "for.cond.preheader"
}
for.cond.preheader: Abstract value:
octagon of dim (1,0)
-y + 100 >= 0
Linear Condition:
array of constraints of size 1
 0: -y + 100 >= 0
Tree Condition:
array of constraints of size 1
 0: 100 + -1 * y >= 0

for.body.lr.ph: Abstract value:
octagon of dim (11,0)
tmp - 4 >= 0
-tmp + 200 >= 0
-tmp + tmp1 + 102 >= 0
tmp + tmp1 - 4 >= 0
tmp1 >= 0
-tmp - tmp1 + 298 >= 0
tmp - tmp1 - 4 >= 0
-tmp1 + 98 >= 0
-tmp + tmp2 + 102 >= 0
tmp + tmp2 - 4 >= 0
-tmp1 + tmp2 >= 0
tmp1 + tmp2 >= 0
tmp2 >= 0
-tmp - tmp2 + 298 >= 0
tmp - tmp2 - 4 >= 0
-tmp1 - tmp2 + 196 >= 0
tmp1 - tmp2 >= 0
-tmp2 + 98 >= 0
-tmp + tmp3 + 103 >= 0
tmp + tmp3 - 3 >= 0
-tmp1 + tmp3 + 1 >= 0
tmp1 + tmp3 + 1 >= 0
-tmp2 + tmp3 + 1 >= 0
tmp2 + tmp3 + 1 >= 0
tmp3 + 1 >= 0
-tmp - tmp3 + 297 >= 0
tmp - tmp3 - 5 >= 0
-tmp1 - tmp3 + 195 >= 0
tmp1 - tmp3 - 1 >= 0
-tmp2 - tmp3 + 195 >= 0
tmp2 - tmp3 - 1 >= 0
-tmp3 + 97 >= 0
-tmp + tmp4 + 103 >= 0
tmp + tmp4 - 3 >= 0
-tmp1 + tmp4 + 1 >= 0
tmp1 + tmp4 + 1 >= 0
-tmp2 + tmp4 + 1 >= 0
tmp2 + tmp4 + 1 >= 0
-tmp3 + tmp4 >= 0
tmp3 + tmp4 + 2 >= 0
tmp4 + 1 >= 0
-tmp - tmp4 + 297 >= 0
tmp - tmp4 - 5 >= 0
-tmp1 - tmp4 + 195 >= 0
tmp1 - tmp4 - 1 >= 0
-tmp2 - tmp4 + 195 >= 0
tmp2 - tmp4 - 1 >= 0
-tmp3 - tmp4 + 194 >= 0
tmp3 - tmp4 >= 0
-tmp4 + 97 >= 0
-tmp6 + tmp7 >= 0
tmp6 - tmp7 >= 0
-tmp8 + tmp9 + 3 >= 0
tmp8 - tmp9 - 3 >= 0
-tmp + y + 100 >= 0
tmp + y - 6 >= 0
-tmp1 + y - 2 >= 0
tmp1 + y - 2 >= 0
-tmp2 + y - 2 >= 0
tmp2 + y - 2 >= 0
-tmp3 + y - 3 >= 0
tmp3 + y - 1 >= 0
-tmp4 + y - 3 >= 0
tmp4 + y - 1 >= 0
y - 2 >= 0
-tmp - y + 300 >= 0
tmp - y - 2 >= 0
-tmp1 - y + 198 >= 0
tmp1 - y + 2 >= 0
-tmp2 - y + 198 >= 0
tmp2 - y + 2 >= 0
-tmp3 - y + 197 >= 0
tmp3 - y + 3 >= 0
-tmp4 - y + 197 >= 0
tmp4 - y + 3 >= 0
-y + 100 >= 0
Linear Condition:
array of constraints of size 76
 0: tmp - 4 >= 0
 1: -tmp + 200 >= 0
 2: -tmp + tmp1 + 102 >= 0
 3: tmp + tmp1 - 4 >= 0
 4: tmp1 >= 0
 5: -tmp - tmp1 + 298 >= 0
 6: tmp - tmp1 - 4 >= 0
 7: -tmp1 + 98 >= 0
 8: -tmp + tmp2 + 102 >= 0
 9: tmp + tmp2 - 4 >= 0
10: -tmp1 + tmp2 >= 0
11: tmp1 + tmp2 >= 0
12: tmp2 >= 0
13: -tmp - tmp2 + 298 >= 0
14: tmp - tmp2 - 4 >= 0
15: -tmp1 - tmp2 + 196 >= 0
16: tmp1 - tmp2 >= 0
17: -tmp2 + 98 >= 0
18: -tmp + tmp3 + 103 >= 0
19: tmp + tmp3 - 3 >= 0
20: -tmp1 + tmp3 + 1 >= 0
21: tmp1 + tmp3 + 1 >= 0
22: -tmp2 + tmp3 + 1 >= 0
23: tmp2 + tmp3 + 1 >= 0
24: tmp3 + 1 >= 0
25: -tmp - tmp3 + 297 >= 0
26: tmp - tmp3 - 5 >= 0
27: -tmp1 - tmp3 + 195 >= 0
28: tmp1 - tmp3 - 1 >= 0
29: -tmp2 - tmp3 + 195 >= 0
30: tmp2 - tmp3 - 1 >= 0
31: -tmp3 + 97 >= 0
32: -tmp + tmp4 + 103 >= 0
33: tmp + tmp4 - 3 >= 0
34: -tmp1 + tmp4 + 1 >= 0
35: tmp1 + tmp4 + 1 >= 0
36: -tmp2 + tmp4 + 1 >= 0
37: tmp2 + tmp4 + 1 >= 0
38: -tmp3 + tmp4 >= 0
39: tmp3 + tmp4 + 2 >= 0
40: tmp4 + 1 >= 0
41: -tmp - tmp4 + 297 >= 0
42: tmp - tmp4 - 5 >= 0
43: -tmp1 - tmp4 + 195 >= 0
44: tmp1 - tmp4 - 1 >= 0
45: -tmp2 - tmp4 + 195 >= 0
46: tmp2 - tmp4 - 1 >= 0
47: -tmp3 - tmp4 + 194 >= 0
48: tmp3 - tmp4 >= 0
49: -tmp4 + 97 >= 0
50: -tmp6 + tmp7 >= 0
51: tmp6 - tmp7 >= 0
52: -tmp8 + tmp9 + 3 >= 0
53: tmp8 - tmp9 - 3 >= 0
54: -tmp + y + 100 >= 0
55: tmp + y - 6 >= 0
56: -tmp1 + y - 2 >= 0
57: tmp1 + y - 2 >= 0
58: -tmp2 + y - 2 >= 0
59: tmp2 + y - 2 >= 0
60: -tmp3 + y - 3 >= 0
61: tmp3 + y - 1 >= 0
62: -tmp4 + y - 3 >= 0
63: tmp4 + y - 1 >= 0
64: y - 2 >= 0
65: -tmp - y + 300 >= 0
66: tmp - y - 2 >= 0
67: -tmp1 - y + 198 >= 0
68: tmp1 - y + 2 >= 0
69: -tmp2 - y + 198 >= 0
70: tmp2 - y + 2 >= 0
71: -tmp3 - y + 197 >= 0
72: tmp3 - y + 3 >= 0
73: -tmp4 - y + 197 >= 0
74: tmp4 - y + 3 >= 0
75: -y + 100 >= 0
Tree Condition:
array of constraints of size 76
 0: -4 + 1 * tmp >= 0
 1: 200 + -1 * tmp >= 0
 2: 102 + -1 * tmp + 1 * tmp1 >= 0
 3: -4 + 1 * tmp + 1 * tmp1 >= 0
 4: 0 + 1 * tmp1 >= 0
 5: 298 + -1 * tmp + -1 * tmp1 >= 0
 6: -4 + 1 * tmp + -1 * tmp1 >= 0
 7: 98 + -1 * tmp1 >= 0
 8: 102 + -1 * tmp + 1 * tmp2 >= 0
 9: -4 + 1 * tmp + 1 * tmp2 >= 0
10: 0 + -1 * tmp1 + 1 * tmp2 >= 0
11: 0 + 1 * tmp1 + 1 * tmp2 >= 0
12: 0 + 1 * tmp2 >= 0
13: 298 + -1 * tmp + -1 * tmp2 >= 0
14: -4 + 1 * tmp + -1 * tmp2 >= 0
15: 196 + -1 * tmp1 + -1 * tmp2 >= 0
16: 0 + 1 * tmp1 + -1 * tmp2 >= 0
17: 98 + -1 * tmp2 >= 0
18: 103 + -1 * tmp + 1 * tmp3 >= 0
19: -3 + 1 * tmp + 1 * tmp3 >= 0
20: 1 + -1 * tmp1 + 1 * tmp3 >= 0
21: 1 + 1 * tmp1 + 1 * tmp3 >= 0
22: 1 + -1 * tmp2 + 1 * tmp3 >= 0
23: 1 + 1 * tmp2 + 1 * tmp3 >= 0
24: 1 + 1 * tmp3 >= 0
25: 297 + -1 * tmp + -1 * tmp3 >= 0
26: -5 + 1 * tmp + -1 * tmp3 >= 0
27: 195 + -1 * tmp1 + -1 * tmp3 >= 0
28: -1 + 1 * tmp1 + -1 * tmp3 >= 0
29: 195 + -1 * tmp2 + -1 * tmp3 >= 0
30: -1 + 1 * tmp2 + -1 * tmp3 >= 0
31: 97 + -1 * tmp3 >= 0
32: 103 + -1 * tmp + 1 * tmp4 >= 0
33: -3 + 1 * tmp + 1 * tmp4 >= 0
34: 1 + -1 * tmp1 + 1 * tmp4 >= 0
35: 1 + 1 * tmp1 + 1 * tmp4 >= 0
36: 1 + -1 * tmp2 + 1 * tmp4 >= 0
37: 1 + 1 * tmp2 + 1 * tmp4 >= 0
38: 0 + -1 * tmp3 + 1 * tmp4 >= 0
39: 2 + 1 * tmp3 + 1 * tmp4 >= 0
40: 1 + 1 * tmp4 >= 0
41: 297 + -1 * tmp + -1 * tmp4 >= 0
42: -5 + 1 * tmp + -1 * tmp4 >= 0
43: 195 + -1 * tmp1 + -1 * tmp4 >= 0
44: -1 + 1 * tmp1 + -1 * tmp4 >= 0
45: 195 + -1 * tmp2 + -1 * tmp4 >= 0
46: -1 + 1 * tmp2 + -1 * tmp4 >= 0
47: 194 + -1 * tmp3 + -1 * tmp4 >= 0
48: 0 + 1 * tmp3 + -1 * tmp4 >= 0
49: 97 + -1 * tmp4 >= 0
50: 0 + -1 * tmp6 + 1 * tmp7 >= 0
51: 0 + 1 * tmp6 + -1 * tmp7 >= 0
52: 3 + -1 * tmp8 + 1 * tmp9 >= 0
53: -3 + 1 * tmp8 + -1 * tmp9 >= 0
54: 100 + -1 * tmp + 1 * y >= 0
55: -6 + 1 * tmp + 1 * y >= 0
56: -2 + -1 * tmp1 + 1 * y >= 0
57: -2 + 1 * tmp1 + 1 * y >= 0
58: -2 + -1 * tmp2 + 1 * y >= 0
59: -2 + 1 * tmp2 + 1 * y >= 0
60: -3 + -1 * tmp3 + 1 * y >= 0
61: -1 + 1 * tmp3 + 1 * y >= 0
62: -3 + -1 * tmp4 + 1 * y >= 0
63: -1 + 1 * tmp4 + 1 * y >= 0
64: -2 + 1 * y >= 0
65: 300 + -1 * tmp + -1 * y >= 0
66: -2 + 1 * tmp + -1 * y >= 0
67: 198 + -1 * tmp1 + -1 * y >= 0
68: 2 + 1 * tmp1 + -1 * y >= 0
69: 198 + -1 * tmp2 + -1 * y >= 0
70: 2 + 1 * tmp2 + -1 * y >= 0
71: 197 + -1 * tmp3 + -1 * y >= 0
72: 3 + 1 * tmp3 + -1 * y >= 0
73: 197 + -1 * tmp4 + -1 * y >= 0
74: 3 + 1 * tmp4 + -1 * y >= 0
75: 100 + -1 * y >= 0

entry: Abstract value:
empty octagon of dim (1,0)
Linear Condition:
array of constraints of size 1
 0: -1 >= 0
Tree Condition:
array of constraints of size 1
 0: -1 >= 0

return: Abstract value:
octagon of dim (12,0)
tmp >= 0
-tmp + 200 >= 0
-tmp + tmp1 + 102 >= 0
tmp + tmp1 >= 0
tmp1 >= 0
-tmp - tmp1 + 298 >= 0
tmp - tmp1 >= 0
-tmp1 + 98 >= 0
-tmp + tmp2 + 102 >= 0
tmp + tmp2 >= 0
-tmp1 + tmp2 >= 0
tmp1 + tmp2 >= 0
tmp2 >= 0
-tmp - tmp2 + 298 >= 0
tmp - tmp2 >= 0
-tmp1 - tmp2 + 196 >= 0
tmp1 - tmp2 >= 0
-tmp2 + 98 >= 0
-tmp + tmp3 + 103 >= 0
tmp + tmp3 >= 0
-tmp1 + tmp3 + 1 >= 0
tmp1 + tmp3 + 1 >= 0
-tmp2 + tmp3 + 1 >= 0
tmp2 + tmp3 + 1 >= 0
tmp3 + 1 >= 0
-tmp - tmp3 + 297 >= 0
tmp - tmp3 >= 0
-tmp1 - tmp3 + 195 >= 0
tmp1 - tmp3 >= 0
-tmp2 - tmp3 + 195 >= 0
tmp2 - tmp3 >= 0
-tmp3 + 97 >= 0
-tmp + tmp4 + 103 >= 0
tmp + tmp4 >= 0
-tmp1 + tmp4 + 1 >= 0
tmp1 + tmp4 + 1 >= 0
-tmp2 + tmp4 + 1 >= 0
tmp2 + tmp4 + 1 >= 0
-tmp3 + tmp4 >= 0
tmp3 + tmp4 + 2 >= 0
tmp4 + 1 >= 0
-tmp - tmp4 + 297 >= 0
tmp - tmp4 >= 0
-tmp1 - tmp4 + 195 >= 0
tmp1 - tmp4 >= 0
-tmp2 - tmp4 + 195 >= 0
tmp2 - tmp4 >= 0
-tmp3 - tmp4 + 194 >= 0
tmp3 - tmp4 >= 0
-tmp4 + 97 >= 0
-tmp6 + tmp7 >= 0
tmp6 - tmp7 >= 0
-retval.0 + tmp8 >= 0
retval.0 - tmp8 + 3 >= 0
-retval.0 + tmp9 >= 0
-tmp8 + tmp9 + 3 >= 0
retval.0 - tmp9 + 1 >= 0
tmp8 - tmp9 >= 0
Linear Condition:
array of constraints of size 58
 0: tmp >= 0
 1: -tmp + 200 >= 0
 2: -tmp + tmp1 + 102 >= 0
 3: tmp + tmp1 >= 0
 4: tmp1 >= 0
 5: -tmp - tmp1 + 298 >= 0
 6: tmp - tmp1 >= 0
 7: -tmp1 + 98 >= 0
 8: -tmp + tmp2 + 102 >= 0
 9: tmp + tmp2 >= 0
10: -tmp1 + tmp2 >= 0
11: tmp1 + tmp2 >= 0
12: tmp2 >= 0
13: -tmp - tmp2 + 298 >= 0
14: tmp - tmp2 >= 0
15: -tmp1 - tmp2 + 196 >= 0
16: tmp1 - tmp2 >= 0
17: -tmp2 + 98 >= 0
18: -tmp + tmp3 + 103 >= 0
19: tmp + tmp3 >= 0
20: -tmp1 + tmp3 + 1 >= 0
21: tmp1 + tmp3 + 1 >= 0
22: -tmp2 + tmp3 + 1 >= 0
23: tmp2 + tmp3 + 1 >= 0
24: tmp3 + 1 >= 0
25: -tmp - tmp3 + 297 >= 0
26: tmp - tmp3 >= 0
27: -tmp1 - tmp3 + 195 >= 0
28: tmp1 - tmp3 >= 0
29: -tmp2 - tmp3 + 195 >= 0
30: tmp2 - tmp3 >= 0
31: -tmp3 + 97 >= 0
32: -tmp + tmp4 + 103 >= 0
33: tmp + tmp4 >= 0
34: -tmp1 + tmp4 + 1 >= 0
35: tmp1 + tmp4 + 1 >= 0
36: -tmp2 + tmp4 + 1 >= 0
37: tmp2 + tmp4 + 1 >= 0
38: -tmp3 + tmp4 >= 0
39: tmp3 + tmp4 + 2 >= 0
40: tmp4 + 1 >= 0
41: -tmp - tmp4 + 297 >= 0
42: tmp - tmp4 >= 0
43: -tmp1 - tmp4 + 195 >= 0
44: tmp1 - tmp4 >= 0
45: -tmp2 - tmp4 + 195 >= 0
46: tmp2 - tmp4 >= 0
47: -tmp3 - tmp4 + 194 >= 0
48: tmp3 - tmp4 >= 0
49: -tmp4 + 97 >= 0
50: -tmp6 + tmp7 >= 0
51: tmp6 - tmp7 >= 0
52: -retval.0 + tmp8 >= 0
53: retval.0 - tmp8 + 3 >= 0
54: -retval.0 + tmp9 >= 0
55: -tmp8 + tmp9 + 3 >= 0
56: retval.0 - tmp9 + 1 >= 0
57: tmp8 - tmp9 >= 0
Tree Condition:
array of constraints of size 58
 0: 0 + 1 * tmp >= 0
 1: 200 + -1 * tmp >= 0
 2: 102 + -1 * tmp + 1 * tmp1 >= 0
 3: 0 + 1 * tmp + 1 * tmp1 >= 0
 4: 0 + 1 * tmp1 >= 0
 5: 298 + -1 * tmp + -1 * tmp1 >= 0
 6: 0 + 1 * tmp + -1 * tmp1 >= 0
 7: 98 + -1 * tmp1 >= 0
 8: 102 + -1 * tmp + 1 * tmp2 >= 0
 9: 0 + 1 * tmp + 1 * tmp2 >= 0
10: 0 + -1 * tmp1 + 1 * tmp2 >= 0
11: 0 + 1 * tmp1 + 1 * tmp2 >= 0
12: 0 + 1 * tmp2 >= 0
13: 298 + -1 * tmp + -1 * tmp2 >= 0
14: 0 + 1 * tmp + -1 * tmp2 >= 0
15: 196 + -1 * tmp1 + -1 * tmp2 >= 0
16: 0 + 1 * tmp1 + -1 * tmp2 >= 0
17: 98 + -1 * tmp2 >= 0
18: 103 + -1 * tmp + 1 * tmp3 >= 0
19: 0 + 1 * tmp + 1 * tmp3 >= 0
20: 1 + -1 * tmp1 + 1 * tmp3 >= 0
21: 1 + 1 * tmp1 + 1 * tmp3 >= 0
22: 1 + -1 * tmp2 + 1 * tmp3 >= 0
23: 1 + 1 * tmp2 + 1 * tmp3 >= 0
24: 1 + 1 * tmp3 >= 0
25: 297 + -1 * tmp + -1 * tmp3 >= 0
26: 0 + 1 * tmp + -1 * tmp3 >= 0
27: 195 + -1 * tmp1 + -1 * tmp3 >= 0
28: 0 + 1 * tmp1 + -1 * tmp3 >= 0
29: 195 + -1 * tmp2 + -1 * tmp3 >= 0
30: 0 + 1 * tmp2 + -1 * tmp3 >= 0
31: 97 + -1 * tmp3 >= 0
32: 103 + -1 * tmp + 1 * tmp4 >= 0
33: 0 + 1 * tmp + 1 * tmp4 >= 0
34: 1 + -1 * tmp1 + 1 * tmp4 >= 0
35: 1 + 1 * tmp1 + 1 * tmp4 >= 0
36: 1 + -1 * tmp2 + 1 * tmp4 >= 0
37: 1 + 1 * tmp2 + 1 * tmp4 >= 0
38: 0 + -1 * tmp3 + 1 * tmp4 >= 0
39: 2 + 1 * tmp3 + 1 * tmp4 >= 0
40: 1 + 1 * tmp4 >= 0
41: 297 + -1 * tmp + -1 * tmp4 >= 0
42: 0 + 1 * tmp + -1 * tmp4 >= 0
43: 195 + -1 * tmp1 + -1 * tmp4 >= 0
44: 0 + 1 * tmp1 + -1 * tmp4 >= 0
45: 195 + -1 * tmp2 + -1 * tmp4 >= 0
46: 0 + 1 * tmp2 + -1 * tmp4 >= 0
47: 194 + -1 * tmp3 + -1 * tmp4 >= 0
48: 0 + 1 * tmp3 + -1 * tmp4 >= 0
49: 97 + -1 * tmp4 >= 0
50: 0 + -1 * tmp6 + 1 * tmp7 >= 0
51: 0 + 1 * tmp6 + -1 * tmp7 >= 0
52: 0 + -1 * retval.0 + 1 * tmp8 >= 0
53: 3 + 1 * retval.0 + -1 * tmp8 >= 0
54: 0 + -1 * retval.0 + 1 * tmp9 >= 0
55: 3 + -1 * tmp8 + 1 * tmp9 >= 0
56: 1 + 1 * retval.0 + -1 * tmp9 >= 0
57: 0 + 1 * tmp8 + -1 * tmp9 >= 0

{'mpt':{},abstract1:{empty octagon of dim (0,0)
}
octagon of dim (12,0)
tmp >= 0
-tmp + 200 >= 0
-tmp + tmp1 + 102 >= 0
tmp + tmp1 >= 0
tmp1 >= 0
-tmp - tmp1 + 298 >= 0
tmp - tmp1 >= 0
-tmp1 + 98 >= 0
-tmp + tmp2 + 102 >= 0
tmp + tmp2 >= 0
-tmp1 + tmp2 >= 0
tmp1 + tmp2 >= 0
tmp2 >= 0
-tmp - tmp2 + 298 >= 0
tmp - tmp2 >= 0
-tmp1 - tmp2 + 196 >= 0
tmp1 - tmp2 >= 0
-tmp2 + 98 >= 0
-tmp + tmp3 + 103 >= 0
tmp + tmp3 >= 0
-tmp1 + tmp3 + 1 >= 0
tmp1 + tmp3 + 1 >= 0
-tmp2 + tmp3 + 1 >= 0
tmp2 + tmp3 + 1 >= 0
tmp3 + 1 >= 0
-tmp - tmp3 + 297 >= 0
tmp - tmp3 >= 0
-tmp1 - tmp3 + 195 >= 0
tmp1 - tmp3 >= 0
-tmp2 - tmp3 + 195 >= 0
tmp2 - tmp3 >= 0
-tmp3 + 97 >= 0
-tmp + tmp4 + 103 >= 0
tmp + tmp4 >= 0
-tmp1 + tmp4 + 1 >= 0
tmp1 + tmp4 + 1 >= 0
-tmp2 + tmp4 + 1 >= 0
tmp2 + tmp4 + 1 >= 0
-tmp3 + tmp4 >= 0
tmp3 + tmp4 + 2 >= 0
tmp4 + 1 >= 0
-tmp - tmp4 + 297 >= 0
tmp - tmp4 >= 0
-tmp1 - tmp4 + 195 >= 0
tmp1 - tmp4 >= 0
-tmp2 - tmp4 + 195 >= 0
tmp2 - tmp4 >= 0
-tmp3 - tmp4 + 194 >= 0
tmp3 - tmp4 >= 0
-tmp4 + 97 >= 0
-tmp6 + tmp7 >= 0
tmp6 - tmp7 >= 0
-retval.0 + tmp8 >= 0
retval.0 - tmp8 + 3 >= 0
-retval.0 + tmp9 >= 0
-tmp8 + tmp9 + 3 >= 0
retval.0 - tmp9 + 1 >= 0
tmp8 - tmp9 >= 0

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Apron: Function: f4
Apron: Library oct, version 1.0 with NUM_MPQ
digraph "f4" {
	"entry" -> "if.then"
	"entry" -> "if.else"
	"if.then" -> "if.end"
	"if.else" -> "if.end"
}
entry: Abstract value:
empty octagon of dim (1,0)
Linear Condition:
array of constraints of size 1
 0: -1 >= 0
Tree Condition:
array of constraints of size 1
 0: -1 >= 0

if.then: Abstract value:
octagon of dim (2,0)
add - 8 >= 0
add + y - 7 >= 0
-add - y + 7 >= 0
add - y - 9 >= 0
-y - 1 >= 0
Linear Condition:
array of constraints of size 5
 0: add - 8 >= 0
 1: add + y - 7 >= 0
 2: -add - y + 7 >= 0
 3: add - y - 9 >= 0
 4: -y - 1 >= 0
Tree Condition:
array of constraints of size 5
 0: -8 + 1 * add >= 0
 1: -7 + 1 * add + 1 * y >= 0
 2: 7 + -1 * add + -1 * y >= 0
 3: -9 + 1 * add + -1 * y >= 0
 4: -1 + -1 * y >= 0

if.else: Abstract value:
octagon of dim (3,0)
sub1 + 3 >= 0
sub1 + sub2 + 3 >= 0
-sub1 - sub2 - 3 >= 0
sub1 - sub2 + 3 >= 0
-sub2 >= 0
-sub1 + y - 3 >= 0
sub1 + y + 3 >= 0
-sub2 + y >= 0
sub2 + y >= 0
y >= 0
sub1 - y + 3 >= 0
-sub2 - y >= 0
Linear Condition:
array of constraints of size 12
 0: sub1 + 3 >= 0
 1: sub1 + sub2 + 3 >= 0
 2: -sub1 - sub2 - 3 >= 0
 3: sub1 - sub2 + 3 >= 0
 4: -sub2 >= 0
 5: -sub1 + y - 3 >= 0
 6: sub1 + y + 3 >= 0
 7: -sub2 + y >= 0
 8: sub2 + y >= 0
 9: y >= 0
10: sub1 - y + 3 >= 0
11: -sub2 - y >= 0
Tree Condition:
array of constraints of size 12
 0: 3 + 1 * sub1 >= 0
 1: 3 + 1 * sub1 + 1 * sub2 >= 0
 2: -3 + -1 * sub1 + -1 * sub2 >= 0
 3: 3 + 1 * sub1 + -1 * sub2 >= 0
 4: 0 + -1 * sub2 >= 0
 5: -3 + -1 * sub1 + 1 * y >= 0
 6: 3 + 1 * sub1 + 1 * y >= 0
 7: 0 + -1 * sub2 + 1 * y >= 0
 8: 0 + 1 * sub2 + 1 * y >= 0
 9: 0 + 1 * y >= 0
10: 3 + 1 * sub1 + -1 * y >= 0
11: 0 + -1 * sub2 + -1 * y >= 0

if.end: Abstract value:
octagon of dim (7,0)
sub1 + 3 >= 0
sub1 + sub2 + 3 >= 0
-sub1 - sub2 >= 0
sub1 - sub2 + 3 >= 0
-sub2 >= 0
-add3 - x.0 + 7 >= 0
add3 - x.0 + 3 >= 0
-sub1 - x.0 - 1 >= 0
sub1 - x.0 + 3 >= 0
-sub2 - x.0 >= 0
sub2 - x.0 >= 0
-x.0 >= 0
-x.0 + y >= 0
sub1 - y + 3 >= 0
-sub2 - y >= 0
-x.0 - y >= 0
-add3 + z.0 >= 0
add3 + z.0 + 6 >= 0
-sub1 + z.0 >= 0
sub1 + z.0 + 6 >= 0
-sub2 + z.0 + 3 >= 0
sub2 + z.0 + 3 >= 0
-x.0 + z.0 + 3 >= 0
x.0 + z.0 + 3 >= 0
-y + z.0 + 3 >= 0
y + z.0 + 3 >= 0
z.0 + 3 >= 0
-x.0 - z.0 + 7 >= 0
Linear Condition:
array of constraints of size 28
 0: sub1 + 3 >= 0
 1: sub1 + sub2 + 3 >= 0
 2: -sub1 - sub2 >= 0
 3: sub1 - sub2 + 3 >= 0
 4: -sub2 >= 0
 5: -add3 - x.0 + 7 >= 0
 6: add3 - x.0 + 3 >= 0
 7: -sub1 - x.0 - 1 >= 0
 8: sub1 - x.0 + 3 >= 0
 9: -sub2 - x.0 >= 0
10: sub2 - x.0 >= 0
11: -x.0 >= 0
12: -x.0 + y >= 0
13: sub1 - y + 3 >= 0
14: -sub2 - y >= 0
15: -x.0 - y >= 0
16: -add3 + z.0 >= 0
17: add3 + z.0 + 6 >= 0
18: -sub1 + z.0 >= 0
19: sub1 + z.0 + 6 >= 0
20: -sub2 + z.0 + 3 >= 0
21: sub2 + z.0 + 3 >= 0
22: -x.0 + z.0 + 3 >= 0
23: x.0 + z.0 + 3 >= 0
24: -y + z.0 + 3 >= 0
25: y + z.0 + 3 >= 0
26: z.0 + 3 >= 0
27: -x.0 - z.0 + 7 >= 0
Tree Condition:
array of constraints of size 28
 0: 3 + 1 * sub1 >= 0
 1: 3 + 1 * sub1 + 1 * sub2 >= 0
 2: 0 + -1 * sub1 + -1 * sub2 >= 0
 3: 3 + 1 * sub1 + -1 * sub2 >= 0
 4: 0 + -1 * sub2 >= 0
 5: 7 + -1 * add3 + -1 * x.0 >= 0
 6: 3 + 1 * add3 + -1 * x.0 >= 0
 7: -1 + -1 * sub1 + -1 * x.0 >= 0
 8: 3 + 1 * sub1 + -1 * x.0 >= 0
 9: 0 + -1 * sub2 + -1 * x.0 >= 0
10: 0 + 1 * sub2 + -1 * x.0 >= 0
11: 0 + -1 * x.0 >= 0
12: 0 + -1 * x.0 + 1 * y >= 0
13: 3 + 1 * sub1 + -1 * y >= 0
14: 0 + -1 * sub2 + -1 * y >= 0
15: 0 + -1 * x.0 + -1 * y >= 0
16: 0 + -1 * add3 + 1 * z.0 >= 0
17: 6 + 1 * add3 + 1 * z.0 >= 0
18: 0 + -1 * sub1 + 1 * z.0 >= 0
19: 6 + 1 * sub1 + 1 * z.0 >= 0
20: 3 + -1 * sub2 + 1 * z.0 >= 0
21: 3 + 1 * sub2 + 1 * z.0 >= 0
22: 3 + -1 * x.0 + 1 * z.0 >= 0
23: 3 + 1 * x.0 + 1 * z.0 >= 0
24: 3 + -1 * y + 1 * z.0 >= 0
25: 3 + 1 * y + 1 * z.0 >= 0
26: 3 + 1 * z.0 >= 0
27: 7 + -1 * x.0 + -1 * z.0 >= 0

{'mpt':{},abstract1:{empty octagon of dim (0,0)
}
octagon of dim (7,0)
sub1 + 3 >= 0
sub1 + sub2 + 3 >= 0
-sub1 - sub2 >= 0
sub1 - sub2 + 3 >= 0
-sub2 >= 0
-add3 - x.0 + 7 >= 0
add3 - x.0 + 3 >= 0
-sub1 - x.0 - 1 >= 0
sub1 - x.0 + 3 >= 0
-sub2 - x.0 >= 0
sub2 - x.0 >= 0
-x.0 >= 0
-x.0 + y >= 0
sub1 - y + 3 >= 0
-sub2 - y >= 0
-x.0 - y >= 0
-add3 + z.0 >= 0
add3 + z.0 + 6 >= 0
-sub1 + z.0 >= 0
sub1 + z.0 + 6 >= 0
-sub2 + z.0 + 3 >= 0
sub2 + z.0 + 3 >= 0
-x.0 + z.0 + 3 >= 0
x.0 + z.0 + 3 >= 0
-y + z.0 + 3 >= 0
y + z.0 + 3 >= 0
z.0 + 3 >= 0
-x.0 - z.0 + 7 >= 0

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Apron: Function: f5
Apron: Library oct, version 1.0 with NUM_MPQ
digraph "f5" {
	"entry" -> "return"
	"entry" -> "if.else"
	"return" -> "UnifiedReturnBlock"
	"if.else" -> "UnifiedReturnBlock"
}
entry: Abstract value:
empty octagon of dim (1,0)
Linear Condition:
array of constraints of size 1
 0: -1 >= 0
Tree Condition:
array of constraints of size 1
 0: -1 >= 0

return: Abstract value:
octagon of dim (1,0)
y >= 0
Linear Condition:
array of constraints of size 1
 0: y >= 0
Tree Condition:
array of constraints of size 1
 0: 0 + 1 * y >= 0

if.else: Abstract value:
octagon of dim (3,0)
.sub - 1 >= 0
-.sub + sub + 1 >= 0
.sub + sub - 2 >= 0
sub - 1 >= 0
.sub - sub >= 0
.sub + y >= 0
sub + y >= 0
-.sub - y + 1 >= 0
.sub - y - 2 >= 0
-sub - y >= 0
sub - y - 2 >= 0
-y - 1 >= 0
Linear Condition:
array of constraints of size 12
 0: .sub - 1 >= 0
 1: -.sub + sub + 1 >= 0
 2: .sub + sub - 2 >= 0
 3: sub - 1 >= 0
 4: .sub - sub >= 0
 5: .sub + y >= 0
 6: sub + y >= 0
 7: -.sub - y + 1 >= 0
 8: .sub - y - 2 >= 0
 9: -sub - y >= 0
10: sub - y - 2 >= 0
11: -y - 1 >= 0
Tree Condition:
array of constraints of size 12
 0: -1 + 1 * .sub >= 0
 1: 1 + -1 * .sub + 1 * sub >= 0
 2: -2 + 1 * .sub + 1 * sub >= 0
 3: -1 + 1 * sub >= 0
 4: 0 + 1 * .sub + -1 * sub >= 0
 5: 0 + 1 * .sub + 1 * y >= 0
 6: 0 + 1 * sub + 1 * y >= 0
 7: 1 + -1 * .sub + -1 * y >= 0
 8: -2 + 1 * .sub + -1 * y >= 0
 9: 0 + -1 * sub + -1 * y >= 0
10: -2 + 1 * sub + -1 * y >= 0
11: -1 + -1 * y >= 0

UnifiedReturnBlock: Abstract value:
octagon of dim (4,0)
.sub >= 0
-.sub + UnifiedRetVal >= 0
.sub + UnifiedRetVal >= 0
UnifiedRetVal >= 0
-.sub + sub + 1 >= 0
.sub + sub >= 0
UnifiedRetVal + sub >= 0
sub >= 0
.sub - sub >= 0
UnifiedRetVal - sub >= 0
.sub + y >= 0
UnifiedRetVal + y >= 0
sub + y >= 0
UnifiedRetVal - y >= 0
Linear Condition:
array of constraints of size 14
 0: .sub >= 0
 1: -.sub + UnifiedRetVal >= 0
 2: .sub + UnifiedRetVal >= 0
 3: UnifiedRetVal >= 0
 4: -.sub + sub + 1 >= 0
 5: .sub + sub >= 0
 6: UnifiedRetVal + sub >= 0
 7: sub >= 0
 8: .sub - sub >= 0
 9: UnifiedRetVal - sub >= 0
10: .sub + y >= 0
11: UnifiedRetVal + y >= 0
12: sub + y >= 0
13: UnifiedRetVal - y >= 0
Tree Condition:
array of constraints of size 14
 0: 0 + 1 * .sub >= 0
 1: 0 + -1 * .sub + 1 * UnifiedRetVal >= 0
 2: 0 + 1 * .sub + 1 * UnifiedRetVal >= 0
 3: 0 + 1 * UnifiedRetVal >= 0
 4: 1 + -1 * .sub + 1 * sub >= 0
 5: 0 + 1 * .sub + 1 * sub >= 0
 6: 0 + 1 * UnifiedRetVal + 1 * sub >= 0
 7: 0 + 1 * sub >= 0
 8: 0 + 1 * .sub + -1 * sub >= 0
 9: 0 + 1 * UnifiedRetVal + -1 * sub >= 0
10: 0 + 1 * .sub + 1 * y >= 0
11: 0 + 1 * UnifiedRetVal + 1 * y >= 0
12: 0 + 1 * sub + 1 * y >= 0
13: 0 + 1 * UnifiedRetVal + -1 * y >= 0

{'mpt':{},abstract1:{empty octagon of dim (0,0)
}
octagon of dim (4,0)
.sub >= 0
-.sub + UnifiedRetVal >= 0
.sub + UnifiedRetVal >= 0
UnifiedRetVal >= 0
-.sub + sub + 1 >= 0
.sub + sub >= 0
UnifiedRetVal + sub >= 0
sub >= 0
.sub - sub >= 0
UnifiedRetVal - sub >= 0
.sub + y >= 0
UnifiedRetVal + y >= 0
sub + y >= 0
UnifiedRetVal - y >= 0

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Apron: Function: f6
Apron: Library oct, version 1.0 with NUM_MPQ
digraph "f6" {
	"entry" -> "if.end3"
	"entry" -> "if.else"
	"if.end3" -> "UnifiedReturnBlock"
	"if.else" -> "UnifiedReturnBlock"
}
entry: Abstract value:
empty octagon of dim (1,0)
Linear Condition:
array of constraints of size 1
 0: -1 >= 0
Tree Condition:
array of constraints of size 1
 0: -1 >= 0

if.end3: Abstract value:
octagon of dim (1,0)
-y - 1 >= 0
Linear Condition:
array of constraints of size 1
 0: -y - 1 >= 0
Tree Condition:
array of constraints of size 1
 0: -1 + -1 * y >= 0

if.else: Abstract value:
octagon of dim (3,0)
-. + cmp1 >= 0
. - cmp1 >= 0
y >= 0
Linear Condition:
array of constraints of size 3
 0: -. + cmp1 >= 0
 1: . - cmp1 >= 0
 2: y >= 0
Tree Condition:
array of constraints of size 3
 0: 0 + -1 * . + 1 * cmp1 >= 0
 1: 0 + 1 * . + -1 * cmp1 >= 0
 2: 0 + 1 * y >= 0

UnifiedReturnBlock: Abstract value:
octagon of dim (4,0)
-. + UnifiedRetVal + 1 >= 0
. - UnifiedRetVal >= 0
-. + cmp1 >= 0
-UnifiedRetVal + cmp1 >= 0
. - cmp1 >= 0
UnifiedRetVal - cmp1 + 1 >= 0
Linear Condition:
array of constraints of size 6
 0: -. + UnifiedRetVal + 1 >= 0
 1: . - UnifiedRetVal >= 0
 2: -. + cmp1 >= 0
 3: -UnifiedRetVal + cmp1 >= 0
 4: . - cmp1 >= 0
 5: UnifiedRetVal - cmp1 + 1 >= 0
Tree Condition:
array of constraints of size 6
 0: 1 + -1 * . + 1 * UnifiedRetVal >= 0
 1: 0 + 1 * . + -1 * UnifiedRetVal >= 0
 2: 0 + -1 * . + 1 * cmp1 >= 0
 3: 0 + -1 * UnifiedRetVal + 1 * cmp1 >= 0
 4: 0 + 1 * . + -1 * cmp1 >= 0
 5: 1 + 1 * UnifiedRetVal + -1 * cmp1 >= 0

{'mpt':{},abstract1:{empty octagon of dim (0,0)
}
octagon of dim (4,0)
-. + UnifiedRetVal + 1 >= 0
. - UnifiedRetVal >= 0
-. + cmp1 >= 0
-UnifiedRetVal + cmp1 >= 0
. - cmp1 >= 0
UnifiedRetVal - cmp1 + 1 >= 0

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Apron: Function: f7
Apron: Library oct, version 1.0 with NUM_MPQ
digraph "f7" {
	"entry" -> "if.then"
	"entry" -> "if.end"
	"if.then" -> "if.end"
}
entry: Abstract value:
empty octagon of dim (1,0)
Linear Condition:
array of constraints of size 1
 0: -1 >= 0
Tree Condition:
array of constraints of size 1
 0: -1 >= 0

if.then: Abstract value:
octagon of dim (1,0)
y - 31 >= 0
Linear Condition:
array of constraints of size 1
 0: y - 31 >= 0
Tree Condition:
array of constraints of size 1
 0: -31 + 1 * y >= 0

if.end: Abstract value:
octagon of dim (2,0)
y - y.addr.0 >= 0
-y.addr.0 + 30 >= 0
Linear Condition:
array of constraints of size 2
 0: y - y.addr.0 >= 0
 1: -y.addr.0 + 30 >= 0
Tree Condition:
array of constraints of size 2
 0: 0 + 1 * y + -1 * y.addr.0 >= 0
 1: 30 + -1 * y.addr.0 >= 0

{'mpt':{},abstract1:{empty octagon of dim (0,0)
}
octagon of dim (2,0)
y - y.addr.0 >= 0
-y.addr.0 + 30 >= 0

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Apron: Function: f8
Apron: Library oct, version 1.0 with NUM_MPQ
digraph "f8" {
}
entry: Abstract value:
empty octagon of dim (3,0)
Linear Condition:
array of constraints of size 1
 0: -1 >= 0
Tree Condition:
array of constraints of size 1
 0: -1 >= 0

{'mpt':{},abstract1:{empty octagon of dim (0,0)
}
empty octagon of dim (3,0)

